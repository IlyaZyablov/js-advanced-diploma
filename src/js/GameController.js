// –∏–º–ø–æ—Ä—Ç GamePlay –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤
import GamePlay from './GamePlay';

// –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è, —Ö—Ä–∞–Ω—è—â–µ–≥–æ –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞ –¥–æ—Å–∫–µ
import GameState from './GameState';

// –∏–º–ø–æ—Ä—Ç —Ç–µ–º
import themes from './themes';

// –∏–º–ø–æ—Ä—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
import Bowman from './characters/Bowman';
import Daemon from './characters/Daemon';
import Magician from './characters/Magician';
import Swordsman from './characters/Swordsman';
import Undead from './characters/Undead';
import Vampire from './characters/Vampire';

// –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
import { generateTeam } from './generators';
import PositionedCharacter from './PositionedCharacter';

// –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –Ω—É–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ä—Ç—ã
// —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤–µ—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
import { calcTileType } from './utils';

// –∏–º–ø–æ—Ä—Ç –∫—É—Ä—Å–æ—Ä–æ–≤
import cursors from './cursors';

// —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –≤—ã–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
export function getDescription(strings, level, attack, defence, health) {
  const levelIcon = strings[0];
  const attackIcon = strings[1];
  const defenceIcon = strings[2];
  const healthIcon = strings[3];
  return `${levelIcon} ${level} ${attackIcon} ${attack} ${defenceIcon} ${defence} ${healthIcon} ${health}`;
}

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
    this.gameState = new GameState();
  }

  init() {
    // TODO: add event listeners to gamePlay events
    // TODO: load saved stated from stateService
    this.gamePlay.drawUi(themes.prairie);
    this.initCharacters();
    // listeners
    this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this));
    this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this));
    this.gamePlay.addCellClickListener(this.onCellClick.bind(this));
  }

  initCharacters() {
    // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞
    const playerTypes = [Bowman, Swordsman, Magician];
    const playerTeam = generateTeam(playerTypes, 3, 3);

    // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    const enemyTypes = [Daemon, Undead, Vampire];
    const enemyTeam = generateTeam(enemyTypes, 3, 3);

    // –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–π
    this.drawTeams(playerTeam, enemyTeam);
  }

  drawTeams(playerTeam, enemyTeam) {
    const playerTeamPositions = [];
    const enemyTeamPositions = [];
    // —Å–æ–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    for (let i = 0; i < this.gamePlay.boardSize ** 2; i++) {
      // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏—é
      const position = calcTileType(i, this.gamePlay.boardSize);
      if (position === 'top-left' || position === 'bottom-left' || position === 'left') { // –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
        // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        playerTeamPositions.push({ index: i, empty: true });
        // –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Å–ø—Ä–∞–≤–∞ –ø–æ–∑–∏—Ü–∏–∏
        playerTeamPositions.push({ index: i + 1, empty: true });
      } else if (position === 'top-right' || position === 'bottom-right' || position === 'right') { // –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∫–∞
        // –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Å–ª–µ–≤–∞ –ø–æ–∑–∏—Ü–∏–∏
        enemyTeamPositions.push({ index: i - 1, empty: true });
        // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        enemyTeamPositions.push({ index: i, empty: true });
      }
    }
    const teamsPositions = [];
    // —Ä–∞–∑–º–µ—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞
    playerTeam.characters.forEach(element => {
      for (let pos = 0; pos < playerTeamPositions.length; pos++) {
        const randPos = Math.floor(Math.random() * playerTeamPositions.length);
        if (playerTeamPositions[randPos].empty === true) {
          playerTeamPositions[randPos].empty = false;
          const posClass = new PositionedCharacter(element, playerTeamPositions[randPos].index);
          teamsPositions.push(posClass);
          break;
        }
      }
    });
    // —Ä–∞–∑–º–µ—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    enemyTeam.characters.forEach(element => {
      for (let pos = 0; pos < enemyTeamPositions.length; pos++) {
        const randPos = Math.floor(Math.random() * enemyTeamPositions.length);
        if (enemyTeamPositions[randPos].empty === true) {
          enemyTeamPositions[randPos].empty = false;
          const posClass = new PositionedCharacter(element, enemyTeamPositions[randPos].index);
          teamsPositions.push(posClass);
          break;
        }
      }
    });
    this.gamePlay.redrawPositions(teamsPositions);
  }

  onCellClick(index) {
    for (let cellIndex = 0; cellIndex < this.gamePlay.cells.length; cellIndex++) {
      this.gamePlay.deselectCell(cellIndex); // —É–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∫–ª–µ—Ç–æ–∫
    }

    if (this.gameState.step === 'user') { // –µ—Å–ª–∏ –Ω–∞—à —Ö–æ–¥
      if (this.gamePlay.cells[index].children.length > 0) {
        const child = this.gamePlay.cells[index].children[0];
        if ( // –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂
          child.classList.contains('bowman')
          || child.classList.contains('magician')
          || child.classList.contains('swordsman')
        ) {
          this.gamePlay.selectCell(index); // –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          this.gameState.selectedChar = {
            index,
            type: child.dataset.type,
          };
        } else {
          if (this.gameState.selectedChar.index === undefined) {
            // –µ—Å–ª–∏ –Ω–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –≤—ã–±—Ä–∞–Ω, –∏ –º—ã —Ö–æ—Ç–∏–º –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            GamePlay.showError('–≠—Ç–æ –Ω–µ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂!');
          } else {
            console.log('–ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç–∞–∫—É');
          }
        }
      }
    } else {
      GamePlay.showError('–°–µ–π—á–∞—Å –Ω–µ –í–∞—à —Ö–æ–¥!');
    }
  }

  onCellEnter(index) {
    if (this.gamePlay.cells[index].children.length > 0) {
      // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º tooltip –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –ª—é–±–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      const child = this.gamePlay.cells[index].children[0];
      const {
        level, attack, defence, health,
      } = child.dataset;
      this.gamePlay.showCellTooltip(getDescription`üéñ${level}\u2694${attack}üõ°${defence}\u2764${health}`, index);

      // –º–µ–Ω—è–µ–º –∫—É—Ä—Å–æ—Ä, –µ—Å–ª–∏:
      if ( // –º—ã –Ω–∞–≤–æ–¥–∏–º—Å—è –Ω–∞ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        child.classList.contains('bowman')
        || child.classList.contains('magician')
        || child.classList.contains('swordsman')
      ) {
        this.gamePlay.setCursor(cursors.pointer);
      } else { // –º—ã –Ω–∞–≤–æ–¥–∏–º—Å—è –Ω–µ –Ω–∞ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        console.log('–µ—Å–ª–∏ –Ω–∞–≤–µ–ª–∏—Å—å –Ω–µ –Ω–∞ –Ω–∞—à–µ–≥–æ');
        if (this.gameState.selectedChar.index !== undefined) {
          this.gamePlay.setCursor(cursors.crosshair);
          this.gamePlay.selectCell(index, 'red'); // –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        }
      }
    } else {
      if (this.gameState.selectedChar.index !== undefined) {
        // –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–∂–µ—Ç —Å—é–¥–∞ –ø—Ä–æ–π—Ç–∏
        if (this.canMove(index)) {
          this.gamePlay.setCursor(cursors.pointer);
          this.gamePlay.selectCell(index, 'green'); // –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
        } else {
          this.gamePlay.setCursor(cursors.notallowed);
        }
      }
    }
  }

  onCellLeave(index) {
    this.gamePlay.hideCellTooltip(index);
    this.gamePlay.setCursor(cursors.auto);
    if (this.gameState.selectedChar.index !== index) {
      this.gamePlay.deselectCell(index);
    }
  }

  canMove(index) {
    const { selectedChar } = this.gameState;
    let result = false;
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º–µ—á–Ω–∏–∫–∞
    if (selectedChar.type === 'swordsman') {
      if ( // –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        Math.abs(selectedChar.index - index) % this.gamePlay.boardSize === 0
        && Math.abs(selectedChar.index - index) <= this.gamePlay.boardSize * 4
      ) {
        result = true;
      } else if ( // –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        Math.abs(selectedChar.index - index) <= 4
        && this.getHorizontalLine(selectedChar.index) === this.getHorizontalLine(index)
      ) {
        result = true;
      }
    }
    return result;
  }

  getHorizontalLine(index) {
    let result = 0;
    const size = this.gamePlay.boardSize;
    for (let i = 0; i < size; i++) {
      if (index >= size * i && index < size * (i + 1)) {
        result = i + 1;
        break;
      }
    }
    return result;
  }
}
