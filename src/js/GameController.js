// –∏–º–ø–æ—Ä—Ç GamePlay –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤
import GamePlay from './GamePlay';

// –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è, —Ö—Ä–∞–Ω—è—â–µ–≥–æ –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞ –¥–æ—Å–∫–µ
import GameState from './GameState';

// –∏–º–ø–æ—Ä—Ç —Ç–µ–º
import themes from './themes';

// –∏–º–ø–æ—Ä—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
import Bowman from './characters/Bowman';
import Daemon from './characters/Daemon';
import Magician from './characters/Magician';
import Swordsman from './characters/Swordsman';
import Undead from './characters/Undead';
import Vampire from './characters/Vampire';

// –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
import { generateTeam } from './generators';
import PositionedCharacter from './PositionedCharacter';

// –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –Ω—É–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ä—Ç—ã
// —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤–µ—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
import { calcTileType } from './utils';

// –∏–º–ø–æ—Ä—Ç –∫—É—Ä—Å–æ—Ä–æ–≤
import cursors from './cursors';

// —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –≤—ã–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
export function getDescription(strings, level, attack, defence, health) {
  const levelIcon = strings[0];
  const attackIcon = strings[1];
  const defenceIcon = strings[2];
  const healthIcon = strings[3];
  return `${levelIcon} ${level} ${attackIcon} ${attack} ${defenceIcon} ${defence} ${healthIcon} ${health}`;
}

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
    this.gameState = new GameState();
  }

  init() {
    // TODO: add event listeners to gamePlay events
    // TODO: load saved stated from stateService
    this.gamePlay.drawUi(themes.prairie);
    this.initCharacters();
    // listeners
    this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this));
    this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this));
    this.gamePlay.addCellClickListener(this.onCellClick.bind(this));
  }

  initCharacters() {
    // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞
    const playerTypes = [Bowman, Swordsman, Magician];
    const playerTeam = generateTeam(playerTypes, 3, 3);

    // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    const enemyTypes = [Daemon, Undead, Vampire];
    const enemyTeam = generateTeam(enemyTypes, 3, 3);

    // –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–π
    this.drawTeams(playerTeam, enemyTeam);
  }

  drawTeams(playerTeam, enemyTeam) {
    const playerTeamPositions = [];
    const enemyTeamPositions = [];
    // —Å–æ–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    for (let i = 0; i < this.gamePlay.boardSize ** 2; i++) {
      // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏—é
      const position = calcTileType(i, this.gamePlay.boardSize);
      if (position === 'top-left' || position === 'bottom-left' || position === 'left') { // –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
        // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        playerTeamPositions.push({ index: i, empty: true });
        // –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Å–ø—Ä–∞–≤–∞ –ø–æ–∑–∏—Ü–∏–∏
        playerTeamPositions.push({ index: i + 1, empty: true });
      } else if (position === 'top-right' || position === 'bottom-right' || position === 'right') { // –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∫–∞
        // –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Å–ª–µ–≤–∞ –ø–æ–∑–∏—Ü–∏–∏
        enemyTeamPositions.push({ index: i - 1, empty: true });
        // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        enemyTeamPositions.push({ index: i, empty: true });
      }
    }
    // —Ä–∞–∑–º–µ—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞
    playerTeam.characters.forEach(element => {
      for (let pos = 0; pos < playerTeamPositions.length; pos++) {
        const randPos = Math.floor(Math.random() * playerTeamPositions.length);
        if (playerTeamPositions[randPos].empty === true) {
          playerTeamPositions[randPos].empty = false;
          const posClass = new PositionedCharacter(element, playerTeamPositions[randPos].index);
          // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞
          this.gameState.playerCharacters.push(posClass);
          // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
          this.gameState.characters.push(posClass);
          break;
        }
      }
    });
    // —Ä–∞–∑–º–µ—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    enemyTeam.characters.forEach(element => {
      for (let pos = 0; pos < enemyTeamPositions.length; pos++) {
        const randPos = Math.floor(Math.random() * enemyTeamPositions.length);
        if (enemyTeamPositions[randPos].empty === true) {
          enemyTeamPositions[randPos].empty = false;
          const posClass = new PositionedCharacter(element, enemyTeamPositions[randPos].index);
          // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
          this.gameState.enemyCharacters.push(posClass);
          // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
          this.gameState.characters.push(posClass);
          break;
        }
      }
    });
    this.gamePlay.redrawPositions(this.gameState.characters);
  }

  onCellClick(index) {
    for (let cellIndex = 0; cellIndex < this.gamePlay.cells.length; cellIndex++) {
      this.gamePlay.deselectCell(cellIndex); // —É–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∫–ª–µ—Ç–æ–∫
    }

    if (this.gameState.step === 'user') { // –µ—Å–ª–∏ –Ω–∞—à —Ö–æ–¥
      // –µ—Å–ª–∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –ø–æ–ª—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å –∫–∞–∫–æ–π-–ª–∏–±–æ –ø–µ—Ä—Å–æ–Ω–∞–∂
      if (this.gamePlay.cells[index].children.length > 0) {
        const child = this.gamePlay.cells[index].children[0];
        if ( // –µ—Å–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å –Ω–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂
          child.classList.contains('bowman')
          || child.classList.contains('magician')
          || child.classList.contains('swordsman')
        ) {
          this.gamePlay.selectCell(index); // –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          // –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
          for (let i = 0; i < this.gameState.characters.length; i++) {
            const element = this.gameState.characters[i];
            // –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π
            if (element.position === index) {
              this.gameState.selectedChar = element;
            }
          }
        } else { // –µ—Å–ª–∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
          // –µ—Å–ª–∏ –Ω–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –≤—ã–±—Ä–∞–Ω, –∏ –º—ã —Ö–æ—Ç–∏–º –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
          if (this.gameState.selectedChar === undefined) {
            GamePlay.showError('–≠—Ç–æ –Ω–µ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂!');
          } else { // –µ—Å–ª–∏ –Ω–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤—ã–±—Ä–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏
            const char = this.gameState.selectedChar;
            if (this.canAttack(char.character.type, char.position, index)) {
              this.attack(char, index);
            } else {
              GamePlay.showError('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º —Ç–∞–∫ –¥–∞–ª–µ–∫–æ!');
              // –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
              this.gameState.selectedChar = undefined;
            }
          }
        }
      } else { // –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É
        if (this.gameState.selectedChar === undefined) {
          // –µ—Å–ª–∏ –Ω–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –≤—ã–±—Ä–∞–Ω, –∏ –º—ã —Ö–æ—Ç–∏–º –∫–ª–∏–∫–∞–µ–º –ø–æ –ø—É—Å—Ç—ã–º –∫–ª–µ—Ç–∫–∞–º
          GamePlay.showError('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è!');
          return;
        }
        const char = this.gameState.selectedChar;
        if (this.canMove(char.character.type, char.position, index)) {
          this.move(char, index);
        } else {
          GamePlay.showError('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å—é–¥–∞!');
          // –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
          this.gameState.selectedChar = undefined;
        }
      }
    } else {
      GamePlay.showError('–°–µ–π—á–∞—Å –Ω–µ –í–∞—à —Ö–æ–¥!');
    }
  }

  onCellEnter(index) {
    if (this.gamePlay.cells[index].children.length > 0) {
      // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º tooltip –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –ª—é–±–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      const child = this.gamePlay.cells[index].children[0];
      const {
        level, attack, defence, health,
      } = child.dataset;
      this.gamePlay.showCellTooltip(getDescription`üéñ${level}\u2694${attack}üõ°${defence}\u2764${health}`, index);

      // –º–µ–Ω—è–µ–º –∫—É—Ä—Å–æ—Ä, –µ—Å–ª–∏:
      if ( // –º—ã –Ω–∞–≤–æ–¥–∏–º—Å—è –Ω–∞ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        child.classList.contains('bowman')
        || child.classList.contains('magician')
        || child.classList.contains('swordsman')
      ) {
        this.gamePlay.setCursor(cursors.pointer);
      } else { // –º—ã –Ω–∞–≤–æ–¥–∏–º—Å—è –Ω–µ –Ω–∞ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (this.gameState.selectedChar !== undefined) {
          // –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–∞ —Ç–∞–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
          const char = this.gameState.selectedChar;
          if (this.canAttack(char.character.type, char.position, index)) {
            this.gamePlay.setCursor(cursors.crosshair);
            this.gamePlay.selectCell(index, 'red'); // –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
          } else {
            this.gamePlay.setCursor(cursors.notallowed);
          }
        }
      }
    } else {
      if (this.gameState.selectedChar !== undefined) {
        // –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–∂–µ—Ç —Å—é–¥–∞ –ø—Ä–æ–π—Ç–∏
        const char = this.gameState.selectedChar;
        if (this.canMove(char.character.type, char.position, index)) {
          this.gamePlay.setCursor(cursors.pointer);
          this.gamePlay.selectCell(index, 'green'); // –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
        } else {
          this.gamePlay.setCursor(cursors.notallowed);
        }
      }
    }
  }

  onCellLeave(index) {
    this.gamePlay.hideCellTooltip(index);
    this.gamePlay.setCursor(cursors.auto);
    if (this.gameState.selectedChar && this.gameState.selectedChar.position !== index) {
      this.gamePlay.deselectCell(index);
    }
  }

  move(char, toIndex) {
    // –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    for (let i = 0; i < this.gameState.characters.length; i++) {
      const element = this.gameState.characters[i];
      // –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ–∑–∏—Ü–∏–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      if (element.position === char.position) {
        element.position = toIndex; // –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        break;
      }
    }
    // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
    this.gamePlay.redrawPositions(this.gameState.characters);

    // –µ—Å–ª–∏ –±—ã–ª —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
    if (this.gameState.step === 'user') {
      // –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      this.gameState.selectedChar = undefined;
      // –ø–µ—Ä–µ–¥–∞—ë–º —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É
      this.gameState.step = 'enemy';
      // –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
      this.enemyAction();
    } else { // –µ—Å–ª–∏ –±—ã–ª —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
      // –ø–µ—Ä–µ–¥–∞—ë–º —Ö–æ–¥ –∏–≥—Ä–æ–∫—É
      this.gameState.step = 'user';
    }
  }

  attack(char, toIndex) {
    let damage;
    // –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
    for (let i = 0; i < this.gameState.characters.length; i++) {
      const element = this.gameState.characters[i];
      // –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π
      if (element.position === toIndex) {
        damage = Math.max(
          char.character.attack - element.character.defence,
          char.character.attack * 0.1,
        );
        element.character.health -= damage;
      }
    }

    this.gamePlay.showDamage(toIndex, damage).then(() => {
      // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
      this.gamePlay.redrawPositions(this.gameState.characters);

      // –µ—Å–ª–∏ –±—ã–ª —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
      if (this.gameState.step === 'user') {
        // –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        this.gameState.selectedChar = undefined;
        // –ø–µ—Ä–µ–¥–∞—ë–º —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É
        this.gameState.step = 'enemy';
        // –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        this.enemyAction();
      } else { // –µ—Å–ª–∏ –±—ã–ª —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        // –ø–µ—Ä–µ–¥–∞—ë–º —Ö–æ–¥ –∏–≥—Ä–æ–∫—É
        this.gameState.step = 'user';
      }
    });
  }

  async enemyAction() {
    // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:
    // 1) –ø–µ—Ä–µ–±–∏—Ä–∞—é—Ç—Å—è –≤—Å–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏, –∏ –µ—Å–ª–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∏—Ö –∞—Ç–∞–∫–∏ –µ—Å—Ç—å –∏–≥—Ä–æ–∫,
    // —Ç–æ –∞—Ç–∞–∫—É–µ–º —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    // 2) –µ—Å–ª–∏ –∞—Ç–∞–∫–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–µ –±—ã–ª–∞, —Ç–æ —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –¥–≤–∏–≥–∞–µ—Ç—Å—è –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é
    // –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–ª–µ—Ç–∫—É

    // –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º–∏
    let isAttacking = false;
    for (let en = 0; en < this.gameState.enemyCharacters.length; en++) {
      // –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–π –ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞
      if (isAttacking) {
        break;
      }
      const enemy = this.gameState.enemyCharacters[en];
      for (let pl = 0; pl < this.gameState.playerCharacters.length; pl++) {
        const player = this.gameState.playerCharacters[pl];
        // –µ—Å–ª–∏ —É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –µ—Å—Ç—å –∫–∞–∫–æ–π-–ª–∏–±–æ –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å
        if (this.canAttack(enemy.character.type, enemy.position, player.position)) {
          // –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—Ç–∞–∫—É
          this.attack(enemy, player.position);
          console.log(`${enemy.character.type} –∞—Ç–∞–∫–æ–≤–∞–ª ${player.character.type}`);
          // –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
          isAttacking = true;
          break;
        }
      }
    }

    // –µ—Å–ª–∏ –∞—Ç–∞–∫–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–µ –±—ã–ª–∞
    if (!isAttacking) {
      // –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      const randEnemyIndex = Math.floor(Math.random() * this.gameState.enemyCharacters.length);
      const randEnemy = this.gameState.enemyCharacters[randEnemyIndex];
      // –ø–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      const moveIndex = await this.getRandomIndexToMove(randEnemy);
      // –¥–≤–∏–≥–∞–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
      this.move(randEnemy, moveIndex);
    }
  }

  async getRandomIndexToMove(enemy) {
    const allowedPositions = [];
    // –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–æ—Å–∫–∏
    for (let i = 0; i < this.gamePlay.boardSize ** 2; i++) {
      // –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–∞ –ø–æ–∑–∏—Ü–∏—é, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –º–∞—Å—Å–∏–≤
      if (
        this.canMove(enemy.character.type, enemy.position, i)
        && this.gamePlay.cells[i].children.length === 0
      ) {
        allowedPositions.push(i);
      }
    }
    return allowedPositions[Math.floor(Math.random() * allowedPositions.length)];
  }

  canMove(charType, currentIndex, nextIndex) {
    let result = false;
    let stepLength = 0;
    if (charType === 'swordsman' || charType === 'undead') {
      stepLength = 4;
    } else if (charType === 'bowman' || charType === 'vampire') {
      stepLength = 2;
    } else if (charType === 'magician' || charType === 'daemon') {
      stepLength = 1;
    }
    if ( // –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
      Math.abs(currentIndex - nextIndex) % this.gamePlay.boardSize === 0
      && Math.abs(currentIndex - nextIndex) <= this.gamePlay.boardSize * stepLength
    ) {
      result = true;
    } else if ( // –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
      Math.abs(currentIndex - nextIndex) <= stepLength
      && this.getHorizontalLine(currentIndex) === this.getHorizontalLine(nextIndex)
    ) {
      result = true;
    } else if ( // –ø—Ä–∞–≤–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
      Math.abs(currentIndex - nextIndex) % (this.gamePlay.boardSize - 1) === 0
      && Math.abs(currentIndex - nextIndex) <= (this.gamePlay.boardSize - 1) * stepLength
    ) {
      result = true;
    } else if ( // –ª–µ–≤–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
      Math.abs(currentIndex - nextIndex) % (this.gamePlay.boardSize + 1) === 0
      && Math.abs(currentIndex - nextIndex) <= (this.gamePlay.boardSize + 1) * stepLength
    ) {
      result = true;
    }
    return result;
  }

  canAttack(charType, currentIndex, nextIndex) {
    let result = false;
    let attackLength = 0;
    if (charType === 'swordsman' || charType === 'undead') {
      attackLength = 1;
    } else if (charType === 'bowman' || charType === 'vampire') {
      attackLength = 2;
    } else if (charType === 'magician' || charType === 'daemon') {
      attackLength = 4;
    }
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–¥–∏—É—Å
    if ( // –µ—Å–ª–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ –ª–∏–Ω–∏—è–º —É–∂–µ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞ –∞—Ç–∞–∫–∏
      Math.abs(
        this.getHorizontalLine(currentIndex) - this.getHorizontalLine(nextIndex),
      ) > attackLength
    ) {
      return false;
    }

    if ( // –µ—Å–ª–∏ –Ω–∞ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –ª–∏–Ω–∏–∏
      this.getHorizontalLine(currentIndex) === this.getHorizontalLine(nextIndex)
    ) {
      if (Math.abs(currentIndex - nextIndex) <= attackLength) {
        result = true;
      }
      return result;
    }

    // –≤–æ –≤—Å–µ—Ö –∏–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∏—â–µ–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    // –≤ –ª–∏–Ω–∏–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ª–∏–Ω–∏–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–ø–æ —Å—Ç–æ–ª–±–∏–∫—É –≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑)
    const differenceIndex = Math.abs(
      this.getHorizontalLine(currentIndex) - this.getHorizontalLine(nextIndex),
    ) * this.gamePlay.boardSize;
    let similarIndexInEnemyRow;

    // –µ—Å–ª–∏ –Ω–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ –ª–∏–Ω–∏–∏ –Ω–∏–∂–µ, —á–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    if (this.getHorizontalLine(currentIndex) > this.getHorizontalLine(nextIndex)) {
      similarIndexInEnemyRow = currentIndex - differenceIndex;
    } else { // –µ—Å–ª–∏ –Ω–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ –ª–∏–Ω–∏–∏ –≤—ã—à–µ, —á–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
      similarIndexInEnemyRow = currentIndex + differenceIndex;
    }

    // –∏ —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å—á–∏—Ç–∞–ª –ø–æ–∑–∏—Ü–∏—é –Ω–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –µ—Å–ª–∏ –±—ã –æ–Ω –±—ã–ª –Ω–∞ –æ–¥–Ω–æ–π
    // –ª–∏–Ω–∏–∏ —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º, –≤—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏
    if (Math.abs(similarIndexInEnemyRow - nextIndex) <= attackLength) {
      result = true;
    }
    return result;
  }

  getHorizontalLine(index) {
    let result = 0;
    const size = this.gamePlay.boardSize;
    for (let i = 0; i < size; i++) {
      if (index >= size * i && index < size * (i + 1)) {
        result = i + 1;
        break;
      }
    }
    return result;
  }
}
